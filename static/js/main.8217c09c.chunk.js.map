{"version":3,"sources":["App.js","deck.gl-layer.jsx","reportWebVitals.js","index.js"],"names":["data","RenderLayers","props","maxActive","minActive","onHover","value","map","a","active","Math","max","min","elevation","scaleLinear","ColumnLayer","id","pickable","extruded","getPosition","d","coordinates","diskResolution","radius","elevationScale","getFillColor","getElevation","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","minZoom","pitch","bearing","App","state","hover","x","y","hoveredObject","object","layer","this","setState","fetchData","axios","all","get","then","spread","World","vax","vaxData","console","log","location","country","vaxCount","pop","WorldData","continent","countryInfo","long","lat","flag","clickable","iso","iso3","deaths","population","updated","Date","toISOString","substring","recovered","catch","error","style","position","zIndex","background","pointerEvents","borderRadius","left","top","className","src","alt","toLocaleString","layers","renderTooltip","initialViewState","controller","mapStyle","mapboxApiAccessToken","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8217c09c.chunk.js","sourcesContent":["import React from \"react\";\nimport DeckGL from \"deck.gl\";\nimport { StaticMap } from 'react-map-gl';\nimport axios from \"axios\";\nimport { RenderLayers } from \"./deck.gl-layer.jsx\";\nimport _ from \"lodash\";\n\n\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoieW9zbyIsImEiOiJja2d3aHVkMWUwYWZoMzFwbnNxdnhjbmtoIn0.72451mV-JRRnWfaqmz0ZnQ\";\nconst mapStyle = \"mapbox://styles/mapbox/dark-v10\";\nconst INITIAL_VIEW_STATE = {\n  longitude: 12.8333,\n  latitude: 42.8333,\n  zoom: 4,\n  maxZoom: 30,\n  minZoom: 4,\n  pitch: 60,\n  bearing: 5\n};\n\nlet data;\n\nexport default class App extends React.Component {\n  state = {};\n  constructor(props) {\n    super();\n    this.state = {\n      data: [],\n      hover: {\n        x: 0,\n        y: 0,\n        hoveredObject: null\n      }\n    };\n  }\n  renderTooltip({ x, y, object, layer }) {\n    this.setState({ hover: { x, y, layer, hoveredObject: object } });\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  fetchData() {\n    axios.all([\n      axios.get('https://disease.sh/v3/covid-19/countries?allowNull=false'),\n      axios.get('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json'), // https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=1 //https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/vaccine_data_global.csv\n    ]).then(axios.spread((World, vax) => {\n\n      let vaxData = vax.data || [];\n      // // data = vaxData\n      console.log(vaxData);   // FRA.data.total_vaccinations\n\n      vaxData = vaxData.map(function (location) {\n        return {\n          country: location.country,  // data.total_vaccinations,\n          vaxCount: location.data ? (location.data).pop() : \"N/A\",\n        };\n      });\n\n\n      let WorldData = World.data || [];\n      data = WorldData;\n\n      data = data.map(function (location) {\n        return {\n          active: location.active,\n          country: location.country,\n          continent: location.continent,\n          coordinates: [location.countryInfo.long, location.countryInfo.lat],\n          flag: location.countryInfo.flag,\n          clickable: true,\n          iso: location.countryInfo.iso3,\n          deaths: location.deaths,\n          population: location.population,\n          updated: new Date(location.updated).toISOString().substring(0, 10),\n          recovered: location.recovered ? location.recovered : \"N/A\",\n        };\n\n      });\n      // data = data.filter(location => (location.continent === \"Europe\"));\n      // data = WorldData.concat(vaxData);\n      // data = Object.assign(WorldData, vaxData);\n      // data = {...WorldData, ...vaxData}\n      // data = _.merge(WorldData, vaxData);\n      console.log(data);\n      this.setState({ data: data });\n    })).catch((error) => {\n      console.log(error); return [];\n    })\n  }\n  render() {\n    const { hover, data } = this.state;\n    console.log(data);\n    return (\n      <div>\n        <h1>CoVax</h1>\n        {hover.hoveredObject && (\n          <div style={{\n            position: \"absolute\",\n            zIndex: 1000,\n            background: \"#1D1D1F\",\n            pointerEvents: \"none\",\n            borderRadius: \"5px\",\n            left: hover.x,\n            top: hover.y\n          }} >\n            <ul className=\"hoveredObjectData\">\n              <li><img src={hover.hoveredObject.flag} alt={\"flag\"} /></li>\n              <li><h4>{hover.hoveredObject.country}</h4></li>\n              <li>Active cases: <span>{hover.hoveredObject.active.toLocaleString()}</span></li>\n              <li>Recovered: <span>{hover.hoveredObject.recovered.toLocaleString()}</span></li>\n              <li>Deaths: <span>{hover.hoveredObject.deaths.toLocaleString()}</span></li>\n              <li>Population: <span>{hover.hoveredObject.population.toLocaleString()}</span></li>\n              <li>updated: <span>{hover.hoveredObject.updated}</span></li>\n            </ul>\n          </div>\n          )\n        }\n        <DeckGL layers={RenderLayers({ data: data, onHover: hover => this.renderTooltip(hover)})} initialViewState={INITIAL_VIEW_STATE} controller={true} ><StaticMap mapStyle={mapStyle} mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n        </DeckGL>\n      </div>\n\n    );\n  }\n}","import { ColumnLayer } from \"deck.gl\";\nimport { scaleLinear } from \"d3-scale\";\n\nexport const RenderLayers = (props) => {\n  let maxActive, minActive;\n  const radiusColumns = 30000;\n  const { data, onHover } = props;\n  const value = data.map((a) => a.active);\n  maxActive = Math.max(...value);\n  minActive = Math.min(...value);\n  const elevation = scaleLinear([minActive, maxActive], [1000, 20000]);\n\n  return [\n    new ColumnLayer({\n    id: \"cases\",\n    data,\n    pickable: true,\n    extruded: true,\n    getPosition: d => d.coordinates,\n    diskResolution: 10,\n    radius: radiusColumns,\n    elevationScale: 100,\n    getFillColor: [138, 3, 3],\n    getElevation: d => elevation(d.active),\n    onHover,\n    }),\n  ];\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}