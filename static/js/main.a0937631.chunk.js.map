{"version":3,"sources":["deck.gl-layer.jsx","Modal.js","App.js","reportWebVitals.js","index.js"],"names":["RenderLayers","props","maxActive","minActive","data","onHover","onClick","value","map","a","active","Math","max","min","elevation","scaleLinear","ColumnLayer","id","pickable","extruded","getPosition","d","coordinates","diskResolution","radius","elevationScale","getFillColor","getElevation","Modal","state","closeModal","this","className","aria-label","event","children","React","Component","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","minZoom","pitch","bearing","App","setState","click","clickedObject","render","hover","x","y","hoveredObject","object","layer","fetchData","axios","all","get","then","spread","World","vax","vaxData","location","vaxCount","pop","iso","iso_code","clickable","WorldData","country","continent","countryInfo","long","lat","flag","iso3","deaths","population","updated","Date","toISOString","substring","recovered","merged","_","merge","keyBy","values","splice","console","log","catch","error","modelState","style","position","zIndex","background","pointerEvents","borderRadius","left","top","src","alt","toLocaleString","people_vaccinated","people_fully_vaccinated","total_vaccinations","layers","renderTooltip","renderLocation","initialViewState","controller","mapStyle","mapboxApiAccessToken","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0937631.chunk.js","sourcesContent":["import { ColumnLayer, HexagonLayer } from \"deck.gl\";\nimport { scaleLinear, scaleLog } from \"d3-scale\";\n\nexport const RenderLayers = (props) => {\n  let maxActive, minActive;\n  const radiusColumns = 40000;\n  const { data, onHover, onClick } = props;\n  const value = data.map((a) => a.active);\n  maxActive = Math.max(...value);\n  minActive = Math.min(...value);\n  const elevation = scaleLinear([minActive, maxActive], [1000, 20000]);\n\n  return [\n    new ColumnLayer({\n    id: \"situation\",\n    data,\n    pickable: true,\n    extruded: true,\n    getPosition: d => d.coordinates,\n    diskResolution: 100,\n    radius: radiusColumns,\n    elevationScale: 100,\n    // wireframe: true,\n    // getLineColor: [0, 0, 0],\n    // getLineWidth: 20,\n    // colorRange: true,\n    getFillColor: [127, 3, 3, 255],  ///[48, 128, (d.population / d.active) * 100 * 255, 255],    ///[(d.population / d.active) * 100 * 255, 3, 3],\n    getElevation: d => elevation(d.active),\n    onHover,\n    onClick\n    }),\n  ];\n}","import React from \"react\";\nclass Modal extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {};\n  }\n\n  render() {\n    const closeModal = this.props.closeModal;\n\n    return (\n      <div className=\"modal\">\n          <button aria-label=\"close\" onClick={event => closeModal(event)} />\n          {this.props.children}\n     </div>\n    );\n  }\n}\n\nexport default Modal;","import React from \"react\";\nimport DeckGL from \"deck.gl\";\nimport { StaticMap } from 'react-map-gl';\nimport axios from \"axios\";\nimport { RenderLayers } from \"./deck.gl-layer.jsx\";\nimport _ from \"lodash\";\nimport Modal from \"./Modal\";\n\n\nconst MAPBOX_ACCESS_TOKEN = \"pk.eyJ1IjoieW9zbyIsImEiOiJja2d3aHVkMWUwYWZoMzFwbnNxdnhjbmtoIn0.72451mV-JRRnWfaqmz0ZnQ\";\nconst mapStyle = \"mapbox://styles/mapbox/dark-v10\";\nconst INITIAL_VIEW_STATE = {\n  longitude: 12.8333,\n  latitude: 42.8333,\n  zoom: 4,\n  maxZoom: 30,\n  minZoom: 4,\n  pitch: 60,\n  bearing: 5\n};\n\nlet data;\nlet iso;\n\nexport default class App extends React.Component {\n  state = {};\n  constructor(props) {\n    super();\n    this.state = {\n      data: [],\n      click: {\n        clickedObject: null\n      },\n      hover: {\n        x: 0,\n        y: 0,\n        hoveredObject: null\n      }\n    };\n  }\n\n  closeModal = () => {\n    this.setState({\n      click: {\n        clickedObject: null\n      },\n      render: false\n    });\n  }\n\n  renderLocation({ object, layer }) {\n    this.setState({ click: { layer, clickedObject: object } });\n\n  }\n\n  renderTooltip({ x, y, object, layer }) {\n    this.setState({ hover: { x, y, layer, hoveredObject: object } });\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  fetchData() {\n    axios.all([\n      axios.get('https://disease.sh/v3/covid-19/countries?allowNull=false'),\n      axios.get('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json'), // https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=1 //https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/vaccine_data_global.csv\n    ]).then(axios.spread((World, vax) => {\n\n      let vaxData = vax.data || [];\n      // // data = vaxData\n      // console.log(vaxData);   // FRA.data.total_vaccinations\n\n      vaxData = vaxData.map(function (location) {\n        return {\n          // country: location.country,  // data.total_vaccinations,\n          vaxCount: location.data ? (location.data).pop() : \"N/A\",\n          iso: location.iso_code,\n          clickable: true,\n        };\n      });\n\n\n      let WorldData = World.data || [];\n      // data = WorldData;\n\n      WorldData = WorldData.map(function (location) {\n        return {\n          active: location.active,\n          country: location.country,\n          continent: location.continent,\n          coordinates: [location.countryInfo.long, location.countryInfo.lat],\n          flag: location.countryInfo.flag,\n          clickable: true,\n          iso: location.countryInfo.iso3,\n          deaths: location.deaths,\n          population: location.population,\n          updated: new Date(location.updated).toISOString().substring(0, 10),\n          recovered: location.recovered ? location.recovered : \"N/A\",\n        };\n\n      });\n      // for (iso in vaxData) {\n      //   if (vaxData.hasOwnProperty(iso) && vaxData[iso] === /([OWID])\\w+/g) {\n      //     delete vaxData[iso];\n      //   }\n      // }\n      // const vaxInfo = vaxData.filter(location => { return (location.iso !== \"SHN\" ) || (location.iso !== \"GGY\")});\n      // console.log(vaxInfo);\n      // data = data.filter(location => (location.continent === \"Europe\"));\n      // data = WorldData.concat(vaxData);\n      // data = Object.assign(vaxData, WorldData);\n      // data = {...WorldData, ...vaxData}\n      // data = _.merge(WorldData, vaxData);\n\n\n      var merged = _.merge(_.keyBy(WorldData, 'iso'), _.keyBy(vaxData, 'iso'));\n      var data = _.values(merged);\n      data.splice(220, 9e9);\n      console.log(data);\n      this.setState({ data: data });\n    })).catch((error) => {\n      console.log(error); return [];\n    })\n  }\n  render() {\n    const { hover, click, data } = this.state;\n    // console.log(data);\n    return (\n      <div>\n        {click.clickedObject && (\n          <div>\n            {click.clickedObject.clickable && (\n              <Modal closeModal={this.closeModal} modelState={\"true\"}>\n              <h1>CoVax</h1>\n              {console.log(\"MODAL !!\")}\n              </Modal>\n            )}\n          </div>\n        )}\n        {hover.hoveredObject && (\n          <div style={{\n            position: \"absolute\",\n            zIndex: 1000,\n            background: \"#1D1D1F\",\n            pointerEvents: \"none\",\n            borderRadius: \"5px\",\n            left: hover.x,\n            top: hover.y\n          }} >\n            <ul className=\"hoveredObjectData\">\n              <li><img src={hover.hoveredObject.flag} alt={\"flag\"} /></li>\n              <li><h4>{hover.hoveredObject.country}</h4></li>\n              <li>Active cases: <span>{hover.hoveredObject.active.toLocaleString()}</span></li>\n              <li>Recovered: <span>{hover.hoveredObject.recovered.toLocaleString()}</span></li>\n              <li>Deaths: <span>{hover.hoveredObject.deaths.toLocaleString()}</span></li>\n              <li>Population: <span>{hover.hoveredObject.population.toLocaleString()}</span></li>\n              <li>People with 1 vaccination: <span>{hover.hoveredObject.vaxCount && hover.hoveredObject.vaxCount.people_vaccinated? hover.hoveredObject.vaxCount.people_vaccinated.toLocaleString() : \"N/A\"}</span></li>\n              <li>People Fully vaccinated: <span>{hover.hoveredObject.vaxCount && hover.hoveredObject.vaxCount.people_fully_vaccinated? hover.hoveredObject.vaxCount.people_fully_vaccinated.toLocaleString() : \"N/A\"}</span></li>\n              <li>Total Vaccinations: <span>{hover.hoveredObject.vaxCount? hover.hoveredObject.vaxCount.total_vaccinations.toLocaleString() : \"N/A\"}</span></li>\n              <li>updated: <span>{hover.hoveredObject.updated}</span></li>\n            </ul>\n          </div>\n          )\n        }\n        <DeckGL layers={RenderLayers({ data: data, onHover: hover => this.renderTooltip(hover), onClick: click => this.renderLocation(click)})} initialViewState={INITIAL_VIEW_STATE} controller={true} ><StaticMap mapStyle={mapStyle} mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n        </DeckGL>\n      </div>\n\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}